plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'checkstyle'
	id 'jacoco'
}

group = 'com.devsjavagirl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('azureVersion', "2.3.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.microsoft.azure:azure-spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

dependencyManagement {
	imports {
		mavenBom "com.microsoft.azure:azure-spring-boot-bom:${azureVersion}"
	}
}

test {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}

jacoco {
	toolVersion = '0.8.5'
	reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport{
	dependsOn test

	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

checkstyle {
	toolVersion = '8.10.1'
	showViolations = true
	ignoreFailures = false
}

tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled false
		html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
	}
}
